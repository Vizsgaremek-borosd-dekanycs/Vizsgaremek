@page "/iam/user-management"
@using vetcms.BrowserPresentation.Components
@using vetcms.ClientApplication.Common.CommandAbstraction
@inject IDialogService DialogService

<FluentCard style="overflow:auto;">
    <FluentGrid>
        <FluentGridItem xs="12">
            <FluentToolbar id="toolbar-fluent-components" style="width:100%">
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton @onclick="@OpenCreateUserDialog" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonAdd())" Appearance="Appearance.Accent">Új felhasználó</FluentButton>
                </PermissionWrapper>
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.KeyMultiple())" Appearance="Appearance.Accent">Jogosultság módosítás</FluentButton>
                </PermissionWrapper>
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonDelete())" Appearance="Appearance.Accent">Törlés</FluentButton>
                </PermissionWrapper>
                <div slot="end">
                    <FluentSearch  @bind-Value=value1 AutoComplete="off"/>
                </div>
            </FluentToolbar>
        </FluentGridItem>
        <FluentGridItem xs="12">
            @if(people != null)
            {
                <FluentDataGrid 
                Items="@people"
                Virtualize="true"
                ItemSize="46"
                GenerateHeader="GenerateHeaderOption.Sticky"
                Style="min-width: max-content;"
                >
                    <SelectColumn TGridItem="Person"
                    SelectMode="DataGridSelectMode.Multiple"
                    SelectFromEntireRow="false"
                    OnSelect="@(e => e.Item.Selected = e.Selected)"
                    SelectAll="@(people.All(p => p.Selected))"
                    SelectAllChanged="@(all => people.ToList().ForEach(p => p.Selected = (all == true)))" />
                    <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.BirthDate)" Format="yyyy-MM-dd" Sortable="true" />
                    <TemplateColumn Title="Actions" Align="@Align.End">
                        <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_EDIT_OTHER_USERS]">
                            <FluentButton aria-label="Szerkesztés" IconStart="@(new Icons.Regular.Size16.Edit())" />
                        </PermissionWrapper>
                        <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_VIEW_OTHERS_ANIMALS]">
                            <FluentButton aria-label="Hozzárendelt páciensek megtekintése" IconStart="@(new Icons.Regular.Size16.AnimalCat())"/>
                        </PermissionWrapper>
                    </TemplateColumn>
                </FluentDataGrid>
            }
        </FluentGridItem>
    </FluentGrid>
</FluentCard>

@code {
    private string value1 = "one";
    private FluentMenuButton menubutton = new();
    private string comboboxValue = "Option 1";
    private bool check1 = true;


    IQueryable<Person> people = new[]
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    }.AsQueryable();

    protected override void OnInitialized()
    {
        GeneratePeople(100);
    }

    private Dictionary<string, string> items = new Dictionary<string, string>();
    private void GeneratePeople(int count)
    {
        var random = new Random();
        var names = new[] { "Jean Martin", "António Langa", "Julie Smith", "Nur Sari", "Jose Hernandez", "Kenji Sato" };
        var peopleList = new List<Person>();

        for (int i = 0; i < count; i++)
        {
            var name = names[random.Next(names.Length)];
            var birthDate = new DateOnly(random.Next(1920, 2020), random.Next(1, 13), random.Next(1, 29));
            peopleList.Add(new Person(i + 1, name, birthDate));
        }

        people = peopleList.AsQueryable();
    }

    private void HandleOnMenuChanged(MenuChangeEventArgs args)
    {
    }

    record Person(int PersonId, string Name, DateOnly BirthDate)
    {
        public bool Selected { get; set; } = false;
    };

    record SimleUser2() : IUserFieldRelatedCommand
    {
        public int TargetUserId { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string VisibleName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
        public DateTime? DateOfBirth { get; set; }
    }


    private async Task OpenCreateUserDialog()
    {
        Console.WriteLine($"Open dialog create user");

        SimleUser2 simpleUser = new SimleUser2()
        {
        };

        DialogParameters parameters = new()
        {
            Title = $"Új felhasználó létrehozása",
            PrimaryAction = "Mentés",
            PrimaryActionEnabled = true,
            SecondaryAction = "Mégsem",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true 
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditUserDialog>(simpleUser, parameters);
        DialogResult? result = await dialog.Result;



        if (result.Data is not null)
        {
            SimleUser2? simplePerson = result.Data as SimleUser2;
            Console.WriteLine($"create user Dialog closed by {simplePerson?.VisibleName} - Canceled: {result.Cancelled}");
            if(!result.Cancelled)
            {
                await SubmitNewUserData(simplePerson);
            }
        }
        else
        {
            Console.WriteLine($"create user Dialog closed - Canceled: {result.Cancelled}");
        }
    }

    private async Task OpenEditUserDialog(int id)
    {
        Console.WriteLine($"Open dialog edit user");

        var simpleUser = await LoadEditUserData(id);

        DialogParameters parameters = new()
            {
                Title = $"Felhasználó szerkesztése",
                PrimaryAction = "Mentés",
                PrimaryActionEnabled = true,
                SecondaryAction = "Mégsem",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditUserDialog>(simpleUser, parameters);
        DialogResult? result = await dialog.Result;



        if (result.Data is not null)
        {
            SimleUser2? simplePerson = result.Data as SimleUser2;
            Console.WriteLine($"Edit user Dialog closed by {simplePerson?.VisibleName} - Canceled: {result.Cancelled}");
            if (!result.Cancelled)
            {
                await SubmitEditUserData(simplePerson);
            }
        }
        else
        {
            Console.WriteLine($"Edit user Dialog closed - Canceled: {result.Cancelled}");
        }
    }

    private async Task<SimleUser2> LoadEditUserData(int id)
    {
        SimleUser2 simpleUser = new SimleUser2()
        {
            TargetUserId = 1,
            Email = "asd@saad.com",
            PhoneNumber = "123456789",
            VisibleName = "VisibleNameasd",
            FirstName = "FirstNameasd",
            LastName = "LastNameasd",
            Address = "Addressasd",
            DateOfBirth = DateTime.Now
        };
        await Task.Delay(1000);
        return simpleUser;
    }

    private async Task SubmitNewUserData(SimleUser2 newUser)
    {
        await Task.Delay(1000);
        Console.WriteLine($"Submit new user data");
    }

    private async Task SubmitEditUserData(SimleUser2 newUser)
    {
        await Task.Delay(1000);
        Console.WriteLine($"Submit edit user data");
    }

    
}