@page "/iam/user-management"
@using vetcms.BrowserPresentation.Components
@using vetcms.BrowserPresentation.Services
@using vetcms.ClientApplication.Common.CommandAbstraction
@inject IDialogService DialogService
@inject IToastService ToastService;

<div>
    
</div>
<FluentCard style="overflow:auto;">
    <FluentGrid >
        <FluentGridItem xs="12">
            <FluentToolbar id="toolbar-fluent-components" style="width:100%">
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton Disabled="isBusy" @onclick="@OpenCreateUserDialog" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonAdd())" Appearance="Appearance.Accent">Új felhasználó</FluentButton>
                </PermissionWrapper>
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton Disabled="isBusy" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.KeyMultiple())" Appearance="Appearance.Accent">Jogosultság módosítás</FluentButton>
                </PermissionWrapper>
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton Disabled="isBusy" @onclick="@DeleteUsers" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonDelete())" Appearance="Appearance.Accent">Törlés</FluentButton>
                </PermissionWrapper>
                <div slot="end">
                    <FluentSearch Disabled="isBusy" @bind-Value=searchValue AutoComplete="off"/>
                </div>
            </FluentToolbar>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <div style="position: sticky;">
                
            </div>
            
            @if(people != null)
            {
                <div style="overflow:auto;" tabindex="-1">
                    <FluentDataGrid
                    Virtualize="true"
                    ItemsProvider="personProvider"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    Style="min-width: max-content;"
                    Pagination="@pagination"
                    >
                        <SelectColumn 
                            TGridItem="Person"
                            SelectMode="DataGridSelectMode.Multiple"
                            SelectFromEntireRow="false"
                            OnSelect="@(e => e.Item.Selected = e.Selected)"
                            SelectAll="@(people.All(p => p.Selected))"
                            SelectAllChanged="@(all => people.ToList().ForEach(p => p.Selected = (all == true)))" 
                        />
                        <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.BirthDate)" Format="yyyy-MM-dd" Sortable="true" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_EDIT_OTHER_USERS]">
                                <FluentButton Disabled="isBusy" aria-label="Szerkesztés" OnClick="@(async ()=> await OpenEditUserDialog(context))" IconStart="@(new Icons.Regular.Size16.Edit())" />
                            </PermissionWrapper>
                            <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_VIEW_OTHERS_ANIMALS]">
                                <FluentButton Disabled="isBusy" OnClick="@(() => Console.WriteLine("Delete clicked"))" aria-label="Hozzárendelt páciensek megtekintése" IconStart="@(new Icons.Regular.Size16.AnimalCat())"/>
                            </PermissionWrapper>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>


            }
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentPaginator State="@pagination" />
        </FluentGridItem>
    </FluentGrid>
</FluentCard>

@code {
    private string searchValue = "one";
    GridItemsProvider<Person> personProvider = default!;
    bool isBusy = false;
    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };

    IQueryable<Person> people = new[]
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    }.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        GeneratePeople(100);
        personProvider = async req =>{
            await Task.Delay(1000);
            return GridItemsProviderResult.From(
                items: people.Skip(req.StartIndex).Take(req.Count.HasValue ? req.Count.Value : 10).ToList(),
                totalItemCount: people.Count());
        };

    }

    private Dictionary<string, string> items = new Dictionary<string, string>();
    private void GeneratePeople(int count)
    {
        var random = new Random();
        var names = new[] { "Jean Martin", "António Langa", "Julie Smith", "Nur Sari", "Jose Hernandez", "Kenji Sato" };
        var peopleList = new List<Person>();

        for (int i = 0; i < count; i++)
        {
            var name = names[random.Next(names.Length)];
            var birthDate = new DateOnly(random.Next(1920, 2020), random.Next(1, 13), random.Next(1, 29));
            peopleList.Add(new Person(i + 1, name, birthDate));
        }

        people = peopleList.AsQueryable();
    }

    record Person(int PersonId, string Name, DateOnly BirthDate)
    {
        public bool Selected { get; set; } = false;
    };

    record SimleUser2() : IUserFieldRelatedCommand
    {
        public int TargetUserId { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string VisibleName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
        public DateTime? DateOfBirth { get; set; }
    }

    public async Task DeleteUsers()
    {
        isBusy = true;
        var dialog = await DialogService.ShowConfirmationAsync("Biztosan el szeretnéd távolítani a felhasználókat?");
        var result = await dialog.Result;
        bool canceled = result.Cancelled;

        if(!canceled)
        {
            await ToastService.ShowIndeterminateProgressToast(Task.Delay(5000), "Kérjük várjon...", "Felhasználók törlése folyamatban...");
        }

        isBusy = false;
    }


    private async Task<DialogResult?> ShowUserDialog(string title, SimleUser2 user)
    {
        DialogParameters parameters = new()
            {
                Title = title,
                PrimaryAction = "Mentés",
                PrimaryActionEnabled = true,
                SecondaryAction = "Mégsem",
                Width = "fit-content",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        IDialogReference dialog = await DialogService.ShowDialogAsync<EditUserDialog>(user, parameters);
        DialogResult? result = await dialog.Result;
        return result;
    }


    private async Task OpenCreateUserDialog()
    {
        isBusy = true;
        Console.WriteLine($"Open dialog create user");

        SimleUser2 simpleUser = new SimleUser2()
        {
        };

        var result = await ShowUserDialog("Új felhasználó létrehozása", simpleUser);

        if (result.Data is not null)
        {
            SimleUser2? simplePerson = result.Data as SimleUser2;
            Console.WriteLine($"create user Dialog closed by {simplePerson?.VisibleName} - Canceled: {result.Cancelled}");
            if(!result.Cancelled)
            {
                await ToastService.ShowIndeterminateProgressToast(SubmitNewUserData(simplePerson), "Kérjük várjon...", "Felhasználó adatainak mentése");
            }
        }
        else
        {
            Console.WriteLine($"create user Dialog closed - Canceled: {result.Cancelled}");
        }
        isBusy = false;

    }

    private async Task OpenEditUserDialog(Person person)
    {
        isBusy = true;
        int id = person.PersonId;
        Console.WriteLine($"Open dialog edit user");
        var simpleUser = await ToastService.ShowIndeterminateProgressToast(LoadEditUserData(id), "Kérjük várjon...", "Felhasználó adatainak betöltése");
        
        var result = await ShowUserDialog("Felhasználó szerkesztése", simpleUser);

        if (result.Data is not null)
        {
            SimleUser2? simplePerson = result.Data as SimleUser2;
            Console.WriteLine($"Edit user Dialog closed by {simplePerson?.VisibleName} - Canceled: {result.Cancelled}");
            if (!result.Cancelled)
            {
                await ToastService.ShowIndeterminateProgressToast(SubmitEditUserData(simplePerson), "Kérjük várjon...", "Felhasználó adatainak mentése");
            }
        }
        else
        {
            Console.WriteLine($"Edit user Dialog closed - Canceled: {result.Cancelled}");
        }

        isBusy = false;
    }

    private async Task<SimleUser2> LoadEditUserData(int id)
    {
        SimleUser2 simpleUser = new SimleUser2()
        {
            TargetUserId = 1,
            Email = "asd@saad.com",
            PhoneNumber = "123456789",
            VisibleName = "VisibleNameasd",
            FirstName = "FirstNameasd",
            LastName = "LastNameasd",
            Address = "Addressasd",
            DateOfBirth = DateTime.Now
        };
        await Task.Delay(1000);
        return simpleUser;
    }

    private async Task SubmitNewUserData(SimleUser2 newUser)
    {
        await Task.Delay(1000);
        Console.WriteLine($"Submit new user data");
    }

    private async Task SubmitEditUserData(SimleUser2 newUser)
    {
        await Task.Delay(1000);
        Console.WriteLine($"Submit edit user data");
    }

    
}