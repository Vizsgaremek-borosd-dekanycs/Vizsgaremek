@using System.Globalization
@using vetcms.BrowserPresentation.Utility
@using vetcms.ClientApplication.Common.CommandAbstraction;
@using vetcms.ClientApplication.Features.PatientClassification.ListAnimalType
@using vetcms.SharedModels.Common.Dto
@using vetcms.SharedModels.Common.IAM.Authorization;
@inject MediatR.IMediator Mediator
@inject IToastService ToastService
@implements IDialogContentComponent<AnimalBreedDto>

<FluentGrid>
    <FluentGridItem xs="12" md="12">
        <FluentGrid>
            <FluentGridItem xs="12" sm="12">
                <FluentTextField Style="width: 100%" @bind-Value="Content.BreedName" Label="Fajta név" TextFieldType="TextFieldType.Text" />
            </FluentGridItem>
            <br />
            <FluentGridItem xs="12" sm="12">
                <FluentTextArea Style="width: 100%" @bind-Value="Content.Charachteristics" Label="Jellemzők"/>
            </FluentGridItem>

            <FluentGridItem Style="display: flex; flex-direction: column; height: 100%;" xs="12" md="12">
                <FluentSearch Style="width: 40%; margin-bottom: 10px;" Disabled="isBusy" @bind-Value="searchTerm" ImmediateDelay="300" AutoComplete="off" Placeholder="Keresés..." />

                <!-- Görgethető konténer -->
                <div style="width: 40%; max-height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 5px;">
                    <FluentListbox Style="width: 100%;" Items="animalTypes" OptionText="@(at => at.TypeName)" Label="Állatfajok" />
                </div>
            </FluentGridItem>


        </FluentGrid>
    </FluentGridItem>
</FluentGrid>

@code {
    [Parameter]
    public AnimalBreedDto Content { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private bool isBusy = false;
    private string searchTerm = "";

    private List<AnimalTypeDto> animalTypes = new();


    protected override async Task OnInitializedAsync()
    {
        animalTypes = await GetBreedTypes();

    }

    private async Task<List<AnimalTypeDto>> GetBreedTypes()
    {
        var query = new AnimalTypeListClientQuery(){
            BreedId = Content.Id,
            SearchTerm = searchTerm,
            Take = null
        };

        var result = await ToastService.ShowIndeterminateProgressToast(Mediator.Send(query), "Kérjük várjon...", "Fajták betöltése folyamatban...");

        if (result == null)
        {
            result = new AnimalTypeByBreedListClientQueryResponse();
        }
        return result.AnimalType;
    }

}
