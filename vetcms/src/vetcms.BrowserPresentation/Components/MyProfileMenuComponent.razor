@using vetcms.ClientApplication.Common.IAM.Commands.AuthenticationStatus
@using vetcms.ClientApplication.Features.IAM.UserLogout;
@using vetcms.SharedModels.Common.Dto
@using System

@inject MediatR.IMediator Mediator

<FluentProfileMenu Initials="@GetInitials()"
                   Style="--fluent-profile-menu-hover: var(--neutral-stroke-focus); padding: 4px;">
    <StartTemplate>
        @User.VisibleName
    </StartTemplate>
    <HeaderTemplate>
        <FluentLabel Typo="@Typography.Header">VetCMS: Felhasználói fiók</FluentLabel>
    </HeaderTemplate>
    <ChildContent>
        <div style="width: 250px; height: 80px">
            <FluentLabel Typo="@Typography.Header" Style="font-weight: bold;">@User.VisibleName</FluentLabel>
            <FluentLabel>@User.Email</FluentLabel>
            <FluentLabel>@User.PhoneNumber</FluentLabel>
        </div>
    </ChildContent>
    <FooterTemplate>
        <FluentStack>
            <FluentAnchor Appearance="@Appearance.Hypertext"
                          Href="/iam/user-profile">
                          Fiók kezelése</FluentAnchor>
            <FluentSpacer />
            <FluentAnchor Appearance="@Appearance.Hypertext"
                          OnClick="Logout"
                          Href="/iam/login"
                          >Kijelentkezés</FluentAnchor>
            
        </FluentStack>
    </FooterTemplate>
</FluentProfileMenu>

@code {
    [Parameter]
    public UserDto User { get; set; } = new UserDto()
    {
        FirstName = "N",
        LastName = "A",
        VisibleName = "N/A",
        Email = "N/A",
        PhoneNumber = "N/A"
    };

	private string showProfilePath => $"/iam/user/{User.Id.ToString()}";

    private string GetInitials()
    {
        if (User.FirstName == string.Empty || User.LastName == string.Empty)
            return "N/A";
        return $"{User.FirstName.Substring(0, 1)}{User.LastName.Substring(0, 1)}";
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(new AuthenticatedStatusQuery());
        if(result.IsAuthenticated && result.CurrentUser != null)
        {
            User = result.CurrentUser;
        }
    }

	private async Task Logout()
	{
        await Mediator.Send(new UserLogoutCommand());
    }
}
